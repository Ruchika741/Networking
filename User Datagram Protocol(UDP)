UDP-

- Layer 4 protocol
- Ability to address processes/app in a host using ports- this host can have many applications running with different requirements and we can send multiple requests to the same IP address that goes to multiple applications in the same host. And that can be uniquely identified using ports. Sender multiplexes all its apps into UDP. Receiver demultiplex UDP datagrams to each app.
- has a destination and source port 
- It is stateless protocol as we don't have state stored in server just like IP that we don't store IP packets information anywhere in router or server
- Simple protocol to send and recieve data
- No prior communication required
- 8 byte header datagram
- if you want to send huge data but not worried about consistency
- Since UDP is connectionless protocol the overhead involved in UDP is less compared to a connection based protocol like TCP.
- For gaming applications this tends to be the perfect protocol due to the lower overhead incurred as opposed to TCP. Typically games send and receive thousands of packets a second that contain information such as opposing players health, location, direction and so on. Now if one of these packets was to be dropped during transmission then it isn't too critical to the game and the worst case scenario is that a player jerks about for a split second during gameplay.

- It's usecases are-

- Video streaming - it's fine even if some video fragments are not transferred. The video will be distorted that's it
- VPN
- DNS(resolves a host name to IP address to send an IP packet to)
- WebRTC(RTC is real time communications)- is a web protocol that uses UDP to connect between two Peers


#UDP Datagram

- UDP header is 8 bytes only(IPV4)
- Datagram slides into an IP packet as "data"
- Port are 16 bit(0 to 65535). 2 byte for source port and 2 for destination port

# UDP Pros

- simple protocol
- Header size is small so datagrams are small
- Uses less bandwidth
- Stateless
- Consumes less memory (no state stored in the server/client)
- Low latency - no handshake, order, retransmission or guaranteed delivery

# UDP Cons

- No acknowledment if the data reaches or not
- No guarantee delivery
- Connection-less - anyone can send data without prior knowledge. Used mostly for attacks. One popular attack is DNS flooding. You can flood a server with UDP packets as it doen't check any prior connection and the server process it
- No flow control(no clue if the target/server can handle amount of data you send), no congestion control(how much data the routers can handle), no ordered packets
- Security - can be easily spoofed


# Example to Spin off a UDP server using python 

Socket -

- Multiple applications connect through socket in internet. Transferring data from one application layer to other application layer
- Socket address is IP(32 bit) + Port(16 bit)
- Socket has basically three parameters - domain(IPv4/IPv6), type(which service we are using TCP/UDP, if we use TCP service then we mention type as SOCK_STREAM and if it is UDP service then type is SOCK_DGRAM), protocol(eg in case of IP the value is 0). By providing this value we setup the socket endpoint.

# Server															Client 

 SOCKET() [Socket(domain,type,protocol)]
	|
	V
 BIND()  [IP + Port]												SOCKET()
 	|																	          |
	V  																	        V
 LISTEN() <---------------------------------CONNECT()
	|																	          |
	V  																	        |
 ACCEPT() 																    |
 	|																	          |
 	V  																	        V
  SEND()----------------------------------> RECV()
  RECV()<---------------------------------- SEND()
    |																	        |
    V  																	      V
   CLOSE()															  CLOSE()


- Socket programming is a way of connecting two nodes on a network to communicate with each other
- One socket(node) listens on a particular port at an IP, while the other socket reaches out to the other to form a connection.
- The server forms the listener socket while the client reaches out to the server.
- A server has a bind() method which binds it to a specific IP and port so that it can listen to incoming requests on that IP and port. A server has a listen() method which puts the server into listening mode. This allows the server to listen to incoming connections. And last a server has an accept() and close() method. The accept method initiates a connection with the client and the close method closes the connection with the client. 